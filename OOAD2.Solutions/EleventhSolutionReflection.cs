namespace OOAD2.Solutions;

public class EleventhSolutionReflection
{
    // Сравнив своё решение с другими студентом, понял, что промахнулся с заданием. Нужно было построить иерархию с 
    // классами General, Any и None, где None замыкает иерархию снизу, и показать, как None работает полиморфно.
    // Я же вместо этого использовал Option-паттерн из функционального программирования — он хорош для реальных проектов,
    // но это вообще не то, что спрашивали. Решение на Java сделано правильно в контексте задачи, в решении есть иерархия 
    // классов, где None наследуется от листовых классов, и метод getSome() возвращает None вместо Any — это и есть 
    // полиморфизм в действии. Хотя в C# нет множественного наследования, я мог построить простую цепочку наследования от
    // General через Any к None и показать, что экземпляр None. Void можно использовать везде, где ожидается Any.
    // В итоге мой Option — это хороший production-код, но задание требовало продемонстрировать именно концепцию замыкания
    // иерархии классов снизу, а не современные подходы к null-safety.
}
