using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOAD2.Solutions
{
    public class SeventeenthSolution
    {
        // На первый взгляд можно подумать:
        // «Менеджер — это сотрудник», «Разработчик — это сотрудник».
        // Звучит как наследование — вроде бы логично сделать отдельные классы Менеджер, Разработчик, Тестировщик, которые наследуются от Сотрудник.
        // Но на практике это неудобно. Роль человека в компании может меняться: сегодня он разработчик, завтра стал тимлидом, потом — менеджером.
        // Создавать каждый раз новый объект другого класса — нелепо, ведь это тот же человек! Поэтому правильнее считать, что сотрудник содержит роль.
        // У него есть поле role, и в него можно подставить нужный тип роли в зависимости от ситуации. Так проще и логичнее, потому что меняется не
        // человек, а только его роль.
        // Так же как пример можно привести пользователя и уровень подписки. На первый взгляд кажется, что: «Премиум-пользователь — это пользователь»,
        // «Бесплатный пользователь — это пользователь». Можно было бы сделать классы FreeUser, PremiumUser, EnterpriseUser и наследовать их от User.
        // Но в реальности пользователь может менять тариф: сначала бесплатный, потом покупает премиум, потом отменяет и возвращается обратно.
        // Это всё тот же человек с тем же аккаунтом, историей и контентом — просто у него поменялся уровень подписки. Значит, лучше сказать, что
        // пользователь содержит подписку. Есть объект User, и внутри него поле subscription, которое можно заменить на другой вариант, не создавая
        // нового пользователя.
    }
}
