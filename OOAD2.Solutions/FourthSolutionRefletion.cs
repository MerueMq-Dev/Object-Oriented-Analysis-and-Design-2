namespace OOAD2.Solutions;

public class FourthSolutionReflection
{
    // Мой ответ про принцип Открыт-Закрыт с игрой (Character, Warrior, Mage, Archer) наглядно показывает, как работает
    // принцип: базовый класс Character и BattleSystem не меняются, чтобы система оставалась стабильной, а новые
    // персонажи с разными типами атак легко добавляются.
    // Однако, сравнивая с ответом преподавателя, я нечётко объяснил почему персонажи открыты (они добавляют новые
    // игровые возможности) и почему BattleSystem закрыт (он выполняет чётко определённую задачу). Главная ошибка моего 
    // подхода — я сосредоточился только на классах и наследовании, тогда как следовало, как у преподавателя, рассмотреть 
    // модули и их назначение: например, «Анализатор логов» открыт для расширения, потому что позволяет добавлять новые 
    // правила, а модуль отправки документов закрыт, так как его задача фиксирована и расширять стандартное поведение
    // нет необходимости.
}