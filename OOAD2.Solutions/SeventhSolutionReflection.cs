namespace OOAD2.Solutions;

public static class SeventhSolutionReflection
{
    // По сути, моё решение и эталонное решение одинаково хорошо показывают принцип динамического связывания. Разница
    // только в примерах: у меня это банковские счета, а в эталонном решении — структуры данных. В обоих случаях
    // переменная базового типа может хранить объект наследника, и при вызове метода программа во время выполнения сама
    // выбирает, какой именно вариант использовать. У меня это расчёт процентов для разных счетов, а в эталонном
    // решении — работа со списками. Получается, моё решение более прикладное и наглядное, а эталонное решение — больше
    // про теорию.
}
