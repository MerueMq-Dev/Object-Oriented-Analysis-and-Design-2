using System.Text;

namespace OOAD2.Solutions
{
    public class SixteenthSolutionReflection
    {
        // Изначально я подумал, что ковариантность — это когда метод возвращает более конкретный тип вместо базового, как в моём Builder'е с HtmlDocumentBuilder.
        // Посмотрев на решения других студентов, я заметил, что в Python используется Generic[animal] с контейнерами, а в Java — массивы, и все они показывают
        // работу с обобщёнными типами. Я понял, что моё решение демонстрирует скорее fluent interface паттерн, а не то, что требовалось. Правильный ковариантный
        // вызов — это когда метод принимает параметр с обобщённым типом, например List<T>, и его логика зависит от конкретного типа T. Мой пример с полиморфизмом
        // был нормальным, но я совсем не показал настоящую ковариантность с дженериками.
    }
}
